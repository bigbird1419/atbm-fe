package com.bigbird.cipher.service.implement;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;

import com.bigbird.cipher.dto.MalwareDetailDTO;
import com.bigbird.cipher.dto.MalwareDTO;
import com.bigbird.cipher.entity.Malware;
import com.bigbird.cipher.repository.MalwareRepository;
import com.bigbird.cipher.service.IMalwareService;

@Service
public class MalwareService implements IMalwareService {
	@Autowired
	private MalwareRepository malwareRepository;
	@Autowired
	private ModelMapper model;

	@Override
	public MalwareDetailDTO save(MalwareDetailDTO malwareDetailDTO) {
		Long id = malwareDetailDTO.getId();
		if (id != null) {
			Malware malw = malwareRepository.findById(id).get();
			malwareDetailDTO.setCreatedDate(malw.getCreatedDate());
			malwareDetailDTO.setUpdateDate(new Date());
		} else {
			malwareDetailDTO.setCreatedDate(new Date());
		}
		Malware malware = model.map(malwareDetailDTO, Malware.class);
		malware = malwareRepository.save(malware);
		return model.map(malware, MalwareDetailDTO.class);
	}

	@Override
	public void delete(Long[] ids) {
		for (Long id : ids) {
			malwareRepository.deleteById(id);
		}
	}

	@Override
	public void deleteById(Long id) {
		malwareRepository.deleteById(id);
	}

	@Override
	public List<MalwareDTO> getAll(int page, int size) {
		List<Malware> tmp = malwareRepository.findAll(PageRequest.of(page, size)).getContent();
		List<MalwareDTO> rs = new ArrayList<>();
		for (Malware malware : tmp) {
			rs.add(model.map(malware, MalwareDTO.class));
		}
		return rs;
	}

	@Override
	public MalwareDetailDTO getById(Long id) {
		Malware malware = malwareRepository.findById(id).get();
		return model.map(malware, MalwareDetailDTO.class);
	}

	@Override
	public List<MalwareDTO> getByName(String name) {
		List<Malware> tmp = malwareRepository.findByNameContaining(name);
		List<MalwareDTO> rs = new ArrayList<>();
		for (Malware malware : tmp) {
			rs.add(model.map(malware, MalwareDTO.class));
		}
		return rs;
	}

	@Override
	public int getTotalPage() {
		return (int) malwareRepository.count();
	}

}
