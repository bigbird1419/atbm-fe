package com.bigbird.cipher.controller;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.bigbird.cipher.config.Caesar;
import com.bigbird.cipher.config.CipherConfiguraion;
import com.bigbird.cipher.dto.MalwareDetailDTO;
import com.bigbird.cipher.dto.MalwareDTO;
import com.bigbird.cipher.payload.BaseResponse;
import com.bigbird.cipher.payload.MalwareResponse;
import com.bigbird.cipher.service.IMalwareService;

@RestController
@RequestMapping("/api/v1/malwares")
public class MalwareController {
	@Autowired
	private IMalwareService malwareService;
	@Autowired
	private CipherConfiguraion cipher;
	@Autowired
	private Caesar caesar;

	@GetMapping()
	public ResponseEntity<?> getMalware(@RequestParam(name = "name", required = false, defaultValue = "") String name,
			@RequestParam(name = "page", required = false, defaultValue = "1") int page,
			@RequestParam(name = "size", required = false, defaultValue = "10") int size,
			@RequestParam(name = "key", required = false, defaultValue = "10") int key) {
		try {
			MalwareResponse rs = new MalwareResponse();
			if (name.length() > 0) {
				List<MalwareDTO> data = malwareService.getByName(caesar.en(name));
				data = data.stream().map(x -> cipher.dycrypt(x, key)).collect(Collectors.toList());
				rs.setData(data);
			} else {
				List<MalwareDTO> data = malwareService.getAll(page - 1, size);
				data = data.stream().map(x -> cipher.dycrypt(x, key)).collect(Collectors.toList());
				rs.setData(data);
			}
			rs.setPage(page);
			rs.setTotalPage(Math.round(malwareService.getTotalPage() / size));
			rs.setMessage("Get data successfuly");
			rs.setStatus("Ok");
			return ResponseEntity.status(HttpStatus.OK).body(rs);
		} catch (Exception e) {
			return ResponseEntity.status(HttpStatus.OK).body(new BaseResponse("Fail", "Can not get data", null));
		}
	}

	@GetMapping("/{id}")
	public ResponseEntity<?> getMalwareById(@PathVariable(name = "id", required = true) Long id,
			@RequestParam(name = "key", required = false, defaultValue = "10") int key) {
		try {
			BaseResponse rs = new BaseResponse();
			MalwareDetailDTO data = malwareService.getById(id);
			rs.setData(cipher.dycrypt(data, key));
			rs.setMessage("Get data successfuly");
			rs.setStatus("Ok");
			return ResponseEntity.status(HttpStatus.OK).body(rs);
		} catch (Exception e) {
			return ResponseEntity.status(HttpStatus.OK).body(new BaseResponse("Fail", "Can not get data", null));
		}
	}

	@PostMapping()
	public ResponseEntity<?> postMalware(@RequestBody MalwareDetailDTO malwareDetailDTO,
			@RequestParam(name = "key", required = false, defaultValue = "10") int key) {
		try {
			BaseResponse rs = new BaseResponse();
			malwareDetailDTO = cipher.encrypt(malwareDetailDTO);
			malwareDetailDTO = malwareService.save(malwareDetailDTO);
			malwareDetailDTO = cipher.dycrypt(malwareDetailDTO, key);
			rs.setData(malwareDetailDTO);
			rs.setMessage("Insert data successfuly");
			rs.setStatus("Ok");
			return ResponseEntity.status(HttpStatus.OK).body(rs);
		} catch (Exception e) {
			return ResponseEntity.status(HttpStatus.OK).body(new BaseResponse("Fail", "Can not insert data", null));
		}
	}

	@PutMapping("/{id}")
	public ResponseEntity<?> putMalware(@PathVariable(name = "id", required = true) Long id,
			@RequestBody MalwareDetailDTO malwareDetailDTO,
			@RequestParam(name = "key", required = false, defaultValue = "10") int key) {
		try {
			BaseResponse rs = new BaseResponse();
			malwareDetailDTO.setId(id);
			malwareDetailDTO = cipher.encrypt(malwareDetailDTO);
			malwareDetailDTO = malwareService.save(malwareDetailDTO);
			malwareDetailDTO = cipher.dycrypt(malwareDetailDTO, key);
			rs.setData(malwareDetailDTO);
			rs.setMessage("Update data successfuly");
			rs.setStatus("Ok");
			return ResponseEntity.status(HttpStatus.OK).body(rs);
		} catch (Exception e) {
			return ResponseEntity.status(HttpStatus.OK).body(new BaseResponse("Fail", "Can not update data", null));
		}
	}

	@DeleteMapping("/{id}")
	public ResponseEntity<?> deleteMalwareById(@PathVariable(name = "id", required = false) Long id) {
		try {
			BaseResponse rs = new BaseResponse();
			malwareService.deleteById(id);
			rs.setMessage("Delete data successfuly");
			rs.setStatus("Ok");
			return ResponseEntity.status(HttpStatus.OK).body(rs);
		} catch (Exception e) {
			return ResponseEntity.status(HttpStatus.OK).body(new BaseResponse("Fail", "Can not delete data", null));
		}
	}

	@DeleteMapping()
	public ResponseEntity<?> deleteMalwareById(@RequestBody Long[] ids) {
		try {
			BaseResponse rs = new BaseResponse();
			malwareService.delete(ids);
			rs.setMessage("Delete data successfuly");
			rs.setStatus("Ok");
			return ResponseEntity.status(HttpStatus.OK).body(rs);
		} catch (Exception e) {
			return ResponseEntity.status(HttpStatus.OK).body(new BaseResponse("Fail", "Can not delete data", null));
		}
	}
}
